{"version":3,"sources":["meyda.js","util.js","windowing.js","extractors/extractorUtilities.js","featureExtractors.js","main.js","extractors/energy.js","extractors/loudness.js","extractors/mfcc.js","extractors/perceptualSharpness.js","extractors/perceptualSpread.js","extractors/powerSpectrum.js","extractors/rms.js","extractors/spectralCentroid.js","extractors/spectralFlatness.js","extractors/spectralKurtosis.js","extractors/spectralRolloff.js","extractors/spectralSkewness.js","extractors/spectralSlope.js","extractors/spectralSpread.js","extractors/zcr.js"],"names":["_interopRequireDefault","obj","__esModule","default","_interopRequireWildcard","newObj","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","isPowerOfTwo","num","error","message","Error","hanning","size","Float32Array","i","Math","cos","PI","hamming","mu","amplitudeSpect","numerator","denominator","k","length","pow","abs","defineProperty","exports","value","_extractorsRms","require","_extractorsRms2","_extractorsEnergy","_extractorsEnergy2","_extractorsSpectralSlope","_extractorsSpectralSlope2","_extractorsSpectralCentroid","_extractorsSpectralCentroid2","_extractorsSpectralRolloff","_extractorsSpectralRolloff2","_extractorsSpectralFlatness","_extractorsSpectralFlatness2","_extractorsSpectralSpread","_extractorsSpectralSpread2","_extractorsSpectralSkewness","_extractorsSpectralSkewness2","_extractorsSpectralKurtosis","_extractorsSpectralKurtosis2","_extractorsZcr","_extractorsZcr2","_extractorsLoudness","_extractorsLoudness2","_extractorsPerceptualSpread","_extractorsPerceptualSpread2","_extractorsPerceptualSharpness","_extractorsPerceptualSharpness2","_extractorsMfcc","_extractorsMfcc2","buffer","bufferSize","m","signal","rms","energy","complexSpectrum","spectralSlope","spectralCentroid","spectralRolloff","spectralFlatness","spectralSpread","spectralSkewness","spectralKurtosis","amplitudeSpectrum","ampSpectrum","zcr","loudness","perceptualSpread","perceptualSharpness","mfcc","module","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","protoProps","staticProps","_util","utilities","_featureExtractors","_featureExtractors2","_default","_class","audioContext","src","bufSize","callback","this","_featuresToExtract","EXTRACTION_STARTED","windowingFunction","self","setSource","_src","source","connect","window","spn","createScriptProcessor","destination","onaudioprocess","e","inputData","inputBuffer","getChannelData","windowedSignal","windowing","data","complex_array","ComplexArray","map","n","real","spec","FFT","sqrt","imag","get","start","features","stop","feature","results","x","featureExtractors","console","generateBlackman","blackman","barkScale","NUM_BARK_BANDS","specific","tot","normalisedSpectrum","bbLimits","Int32Array","sampleRate","atan","currentBandEnd","currentBand","sum","j","total","melToFreq","melValue","freqValue","exp","freqToMel","log","powSpec","numFilters","melValues","melValuesInFreq","lowerLimitFreq","upperLimitFreq","lowerLimitMel","upperLimitMel","range","valueToAdd","fftBinsOfFreq","Array","floor","filterBank","apply","Number","valueOf","loggedMelBands","w1","w2","numCoeffs","dctMatrix","idx","mfccs","v","output","max","spread","powerSpectrum","_extractorUtilities","_extractorUtilities2","ampspec","mu1","mu2","mu3","mu4","nyqBin","ec","threshold","spectrum","ampSum","freqSum","freqs","powFreqSum","ampFreqSum","curFreq"],"mappings":"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","file":"meyda.js","sourcesContent":[null,"export function isPowerOfTwo(num) {\n  while (((num % 2) == 0) && num > 1) {\n    num /= 2;\n  }\n  return (num == 1);\n}\n\nexport function error(message){\n  throw new Error(\"Meyda: \"+message);\n}\n","let generateBlackman = function(size){\n  let blackman = new Float32Array(size);\n  //According to http://uk.mathworks.com/help/signal/ref/blackman.html\n  //first half of the window\n  for (var i = 0; i < (size % 2) ? (size+1)/2 : size/2; i++) {\n    blackman[i] = 0.42 - 0.5*Math.cos(2*Math.PI*i/(size-1)) + 0.08*Math.cos(4*Math.PI*i/(size-1));\n  }\n  //second half of the window\n  for (var i = size/2; i > 0; i--) {\n    blackman[size - i] = blackman[i];\n  }\n}\n\n// @TODO: finish and export Blackman\n\nexport function hanning(size){\n  let hanning = new Float32Array(size);\n  for (var i = 0; i < size; i++) {\n    //According to the R documentation http://rgm.ogalab.net/RGM/R_rdfile?f=GENEAread/man/hanning.window.Rd&d=R_CC\n    hanning[i] = 0.5 - 0.5*Math.cos(2*Math.PI*i/(size-1));\n  }\n  return hanning;\n};\nexport function hamming (size){\n  let hamming = new Float32Array(size);\n  for (var i = 0; i < size; i++) {\n    //According to http://uk.mathworks.com/help/signal/ref/hamming.html\n    hamming[i] = 0.54 - 0.46*Math.cos(2*Math.PI*(i/size-1));\n  }\n  return hamming;\n};\n","export function mu(i, amplitudeSpect){\n  var numerator = 0;\n  var denominator = 0;\n  for(var k = 0; k < amplitudeSpect.length; k++){\n    numerator += Math.pow(k,i)*Math.abs(amplitudeSpect[k]);\n    denominator += amplitudeSpect[k];\n  }\n  return numerator/denominator;\n}\n","import rms from 'extractors/rms';\nimport energy from 'extractors/energy';\nimport spectralSlope from 'extractors/spectralSlope';\nimport spectralCentroid from 'extractors/spectralCentroid';\nimport spectralRolloff from 'extractors/spectralRolloff';\nimport spectralFlatness from 'extractors/spectralFlatness';\nimport spectralSpread from 'extractors/spectralSpread';\nimport spectralSkewness from 'extractors/spectralSkewness';\nimport spectralKurtosis from 'extractors/spectralKurtosis';\nimport zcr from 'extractors/zcr';\nimport loudness from 'extractors/loudness';\nimport perceptualSpread from 'extractors/perceptualSpread';\nimport perceptualSharpness from 'extractors/perceptualSharpness';\nimport mfcc from 'extractors/mfcc';\n\nexport default {\n  \"buffer\" : function(bufferSize,m){\n    return m.signal;\n  },\n  \"rms\": rms,\n  \"energy\": energy,\n  \"complexSpectrum\": function(bufferSize, m) {\n    return m.complexSpectrum;\n  },\n  \"spectralSlope\": spectralSlope,\n  \"spectralCentroid\": spectralCentroid,\n  \"spectralRolloff\": spectralRolloff,\n  \"spectralFlatness\": spectralFlatness,\n  \"spectralSpread\": spectralSpread,\n  \"spectralSkewness\": spectralSkewness,\n  \"spectralKurtosis\": spectralKurtosis,\n  \"amplitudeSpectrum\": function(bufferSize, m){\n    return m.ampSpectrum;\n  },\n  \"zcr\": zcr,\n  \"loudness\": loudness,\n  \"perceptualSpread\": perceptualSpread,\n  \"perceptualSharpness\": perceptualSharpness,\n  \"mfcc\": mfcc\n}\n","import * as utilities from 'util';\nimport featureExtractors from 'featureExtractors';\n\nexport default class{\n\tconstructor(audioContext, src, bufSize, callback){\n\t\tif (!isPowerOfTwo(bufferSize) && !audioContext) {\n\t\t\tutilities.error(\"Invalid Constructor Arguments\");\n\t\t}\n\n\t\tlet bufferSize = bufSize || 256;\n\n\t\t//callback controllers\n\t\tvar EXTRACTION_STARTED = false;\n\t\tvar _featuresToExtract;\n\n\t\t//WINDOWING\n\t\t//set default\n\t\tthis.windowingFunction = \"hanning\";\n\n\t\t//source setter method\n\t\tself.setSource = function(_src) {\n\t\t\tsource = _src;\n\t\t\tsource.connect(window.spn);\n\t\t}\n\n\t\t//create nodes\n\t\twindow.spn = audioContext.createScriptProcessor(bufferSize,1,1);\n\t\tspn.connect(audioContext.destination);\n\n\t\twindow.spn.onaudioprocess = function(e) {\n\t\t\t//this is to obtain the current amplitude spectrum\n\t\t\tvar inputData = e.inputBuffer.getChannelData(0);\n\t\t\tself.signal = inputData;\n\t\t\tvar windowedSignal = self.windowing(self.signal, self.windowingFunction);\n\n\t\t\t//create complexarray to hold the spectrum\n\t\t\tvar data = new complex_array.ComplexArray(bufferSize);\n\t\t\t//map time domain\n\t\t\tdata.map(function(value, i, n) {\n\t\t\t\tvalue.real = windowedSignal[i];\n\t\t\t});\n\t\t\t//transform\n\t\t\tvar spec = data.FFT();\n\t\t\t//assign to meyda\n\t\t\tself.complexSpectrum = spec;\n\t\t\tself.ampSpectrum = new Float32Array(bufferSize/2);\n\t\t\t//calculate amplitude\n\t\t\tfor (var i = 0; i < bufferSize/2; i++) {\n\t\t\t\tself.ampSpectrum[i] = Math.sqrt(Math.pow(spec.real[i],2) + Math.pow(spec.imag[i],2));\n\n\t\t\t}\n\t\t\t//call callback if applicable\n\t\t\tif (typeof callback === \"function\" && EXTRACTION_STARTED) {\n\t\t\t\tcallback(self.get(_featuresToExtract));\n\t\t\t}\n\n\t\t}\n\n\t\tself.start = function(features) {\n\t\t\t_featuresToExtract = features;\n\t\t\tEXTRACTION_STARTED = true;\n\t\t}\n\n\t\tself.stop = function() {\n\t\t\tEXTRACTION_STARTED = false;\n\t\t}\n\n\t\tself.audioContext = audioContext;\n\n\t\tsource.connect(window.spn, 0, 0);\n\t}\n\n\tget(feature) {\n\t\tif(typeof feature === \"object\"){\n\t\t\tvar results = {};\n\t\t\tfor (var x = 0; x < feature.length; x++){\n\t\t\t\ttry{\n\t\t\t\t\tresults[feature[x]] = (self.featureExtractors[feature[x]](bufferSize, self));\n\t\t\t\t} catch (e){\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\t\telse if (typeof feature === \"string\"){\n\t\t\treturn self.featureExtractors[feature](bufferSize, self);\n\t\t}\n\t\telse{\n\t\t\tthrow \"Invalid Feature Format\";\n    }\n  }\n}\n","export default function(bufferSize, m) {\n  var energy = 0;\n  for(var i = 0 ; i < m.signal.length ; i++){\n    energy += Math.pow(Math.abs(m.signal[i]),2);\n  }\n  return energy;\n}\n","export default function(bufferSize, m){\n  var barkScale = new Float32Array(m.ampSpectrum.length);\n  var NUM_BARK_BANDS = 24;\n  var specific = new Float32Array(NUM_BARK_BANDS);\n  var tot = 0;\n  var normalisedSpectrum = m.ampSpectrum;\n  var bbLimits = new Int32Array(NUM_BARK_BANDS+1);\n\n  for(var i = 0; i < barkScale.length; i++){\n    barkScale[i] = i*m.audioContext.sampleRate/(bufferSize);\n    barkScale[i] = 13*Math.atan(barkScale[i]/1315.8) + 3.5* Math.atan(Math.pow((barkScale[i]/7518),2));\n  }\n\n\n  bbLimits[0] = 0;\n  var currentBandEnd = barkScale[m.ampSpectrum.length-1]/NUM_BARK_BANDS;\n  var currentBand = 1;\n  for(var i = 0; i<m.ampSpectrum.length; i++){\n    while(barkScale[i] > currentBandEnd) {\n      bbLimits[currentBand++] = i;\n      currentBandEnd = currentBand*barkScale[m.ampSpectrum.length-1]/NUM_BARK_BANDS;\n    }\n  }\n\n  bbLimits[NUM_BARK_BANDS] = m.ampSpectrum.length-1;\n\n  //process\n\n  for (var i = 0; i < NUM_BARK_BANDS; i++){\n    var sum = 0;\n    for (var j = bbLimits[i] ; j < bbLimits[i+1] ; j++) {\n\n      sum += normalisedSpectrum[j];\n    }\n    specific[i] = Math.pow(sum,0.23);\n  }\n\n  //get total loudness\n  for (var i = 0; i < specific.length; i++){\n    tot += specific[i];\n  }\n  return {\n    \"specific\": specific,\n    \"total\": tot\n  };\n}\n","let melToFreq = function(melValue){\n  var freqValue = 700*(Math.exp(melValue/1125)-1);\n  return freqValue;\n};\n\nlet freqToMel = function(freqValue){\n  var melValue = 1125*Math.log(1+(freqValue/700));\n  return melValue\n};\n\nexport default function(bufferSize, m){\n  //used tutorial from http://practicalcryptography.com/miscellaneous/machine-learning/guide-mel-frequency-cepstral-coefficients-mfccs/\n  var powSpec = m.featureExtractors[\"powerSpectrum\"](bufferSize,m);\n  var numFilters = 26; //26 filters is standard\n  var melValues = new Float32Array(numFilters+2); //the +2 is the upper and lower limits\n  var melValuesInFreq = new Float32Array(numFilters+2);\n  //Generate limits in Hz - from 0 to the nyquist.\n  var lowerLimitFreq = 0;\n  var upperLimitFreq = audioContext.sampleRate/2;\n  //Convert the limits to Mel\n  var lowerLimitMel = freqToMel(lowerLimitFreq);\n  var upperLimitMel = freqToMel(upperLimitFreq);\n  //Find the range\n  var range = upperLimitMel-lowerLimitMel;\n  //Find the range as part of the linear interpolation\n  var valueToAdd = range/(numFilters+1);\n\n  var fftBinsOfFreq = Array(numFilters+2);\n\n  for (var i = 0; i < melValues.length; i++) {\n    //Initialising the mel frequencies - they are just a linear interpolation between the lower and upper limits.\n    melValues[i] = i*valueToAdd;\n    //Convert back to Hz\n    melValuesInFreq[i] = melToFreq(melValues[i]);\n    //Find the corresponding bins\n    fftBinsOfFreq[i] = Math.floor((bufferSize+1)*melValuesInFreq[i]/audioContext.sampleRate);\n  };\n\n  var filterBank = Array(numFilters);\n  for (var j = 0; j < filterBank.length; j++) {\n    //creating a two dimensional array of size numFiltes * (buffersize/2)+1 and pre-populating the arrays with 0s.\n    filterBank[j] = Array.apply(null, new Array((bufferSize/2)+1)).map(Number.prototype.valueOf,0);\n    //creating the lower and upper slopes for each bin\n    for (var i = fftBinsOfFreq[j]; i < fftBinsOfFreq[j+1]; i++) {\n      filterBank[j][i] = (i - fftBinsOfFreq[j])/(fftBinsOfFreq[j+1]-fftBinsOfFreq[j]);\n    }\n    for (var i = fftBinsOfFreq[j+1]; i < fftBinsOfFreq[j+2]; i++) {\n      filterBank[j][i] = (fftBinsOfFreq[j+2]-i)/(fftBinsOfFreq[j+2]-fftBinsOfFreq[j+1])\n    }\n  }\n\n  var loggedMelBands = new Float32Array(numFilters);\n  for (var i = 0; i < loggedMelBands.length; i++) {\n    loggedMelBands[i] = 0;\n    for (var j = 0; j < (bufferSize/2); j++) {\n      //point multiplication between power spectrum and filterbanks.\n      filterBank[i][j] = filterBank[i][j]*powSpec[j];\n\n      //summing up all of the coefficients into one array\n      loggedMelBands[i] += filterBank[i][j];\n    }\n    //log each coefficient\n    loggedMelBands[i] = Math.log(loggedMelBands[i]);\n  }\n\n  //dct\n  var k = Math.PI/numFilters;\n  var w1 = 1.0/Math.sqrt(numFilters);\n  var w2 = Math.sqrt(2.0/numFilters);\n  var numCoeffs = 13;\n  var dctMatrix = new Float32Array(numCoeffs*numFilters);\n\n  for(var i = 0; i < numCoeffs; i++){\n    for (var j = 0; j < numFilters; j++) {\n      var idx = i + (j*numCoeffs);\n      if(i == 0){\n        dctMatrix[idx] = w1 * Math.cos(k * (i+1) * (j+0.5));\n      }\n      else{\n        dctMatrix[idx] = w2 * Math.cos(k * (i+1) * (j+0.5));\n      }\n    }\n  }\n\n  var mfccs = new Float32Array(numCoeffs);\n  for (var k = 0; k < numCoeffs; k++) {\n    var v = 0;\n    for (var n = 0; n < numFilters; n++) {\n      var idx = k + (n*numCoeffs);\n      v += (dctMatrix[idx] * loggedMelBands[n]);\n    }\n    mfccs[k] = v/numCoeffs;\n  }\n  return mfccs;\n}\n","export default function(bufferSize,m) {\n  var loudness = m.featureExtractors[\"loudness\"](bufferSize, m);\n  var spec = loudness.specific;\n  var output = 0;\n\n  for (var i = 0; i < spec.length; i++) {\n    if (i < 15) {\n      output += (i+1) * spec[i+1];\n    }\n    else {\n      output += 0.066 * Math.exp(0.171 * (i+1));\n    }\n  };\n  output *= 0.11/loudness.total;\n\n  return output;\n}\n","export default function(bufferSize, m) {\n  var loudness = m.featureExtractors[\"loudness\"](bufferSize, m);\n\n  var max = 0;\n  for (var i=0; i<loudness.specific.length; i++) {\n    if (loudness.specific[i] > max) {\n      max = loudness.specific[i];\n    }\n  }\n\n  var spread = Math.pow((loudness.total - max)/loudness.total, 2);\n\n  return spread;\n}\n","export default function(bufferSize, m){\n  var powerSpectrum = new Float32Array(m.ampSpectrum.length);\n  for (var i = 0; i < powerSpectrum.length; i++) {\n    powerSpectrum[i] =  Math.pow(m.ampSpectrum[i],2);\n  }\n  return powerSpectrum;\n}\n","export default function(bufferSize, m){\n\n  var rms = 0;\n  for(var i = 0 ; i < m.signal.length ; i++){\n    rms += Math.pow(m.signal[i],2);\n  }\n  rms = rms / m.signal.length;\n  rms = Math.sqrt(rms);\n\n  return rms;\n}\n","import mu from 'extractorUtilities';\n\nexport default function(bufferSize, m){\n  return mu(1,m.ampSpectrum);\n}\n","export default function(bufferSize, m){\n  var ampspec = m.ampSpectrum;\n  var numerator = 0;\n  var denominator = 0;\n  for(var i = 0; i < ampspec.length;i++){\n    numerator += Math.log(ampspec[i]);\n    denominator += ampspec[i];\n  }\n  return Math.exp(numerator/ampspec.length)*ampspec.length/denominator;\n}\n","import mu from 'extractorUtilities';\n\nexport default function(bufferSize, m){\n  var ampspec = m.ampSpectrum;\n  var mu1 = mu(1,ampspec);\n  var mu2 = mu(2,ampspec);\n  var mu3 = mu(3,ampspec);\n  var mu4 = mu(4,ampspec);\n  var numerator = -3*Math.pow(mu1,4)+6*mu1*mu2-4*mu1*mu3+mu4;\n  var denominator = Math.pow(Math.sqrt(mu2-Math.pow(mu1,2)),4);\n  return numerator/denominator;\n}\n","export default function(bufferSize, m){\n  var ampspec = m.ampSpectrum;\n  //calculate nyquist bin\n  var nyqBin = m.audioContext.sampleRate/(2*(ampspec.length-1));\n  var ec = 0;\n  for(var i = 0; i < ampspec.length; i++){\n    ec += ampspec[i];\n  }\n  var threshold = 0.99 * ec;\n  var n = ampspec.length - 1;\n  while(ec > threshold && n >= 0){\n    ec -= ampspec[n];\n          --n;\n  }\n  return (n+1) * nyqBin;\n}\n","import mu from 'extractorUtilities';\n\nexport default function(bufferSize, m, spectrum){\n  var ampspec = m.ampSpectrum;\n  var mu1 = mu(1,ampspec);\n  var mu2 = mu(2,ampspec);\n  var mu3 = mu(3,ampspec);\n  var numerator = 2*Math.pow(mu1,3)-3*mu1*mu2+mu3;\n  var denominator = Math.pow(Math.sqrt(mu2-Math.pow(mu1,2)),3);\n  return numerator/denominator;\n}\n","export default function(bufferSize, m) {\n  //linear regression\n  let ampSum =0;\n  let freqSum=0;\n  let freqs = new Float32Array(m.ampSpectrum.length);\n  let powFreqSum=0;\n  let ampFreqSum=0;\n\n  for (var i = 0; i < m.ampSpectrum.length; i++) {\n    ampSum += m.ampSpectrum[i];\n    let curFreq = i * m.audioContext.sampleRate / bufferSize;\n    freqs[i] = curFreq;\n    powFreqSum += curFreq*curFreq;\n    freqSum += curFreq;\n    ampFreqSum += curFreq*m.ampSpectrum[i];\n  }\n  return (m.ampSpectrum.length*ampFreqSum - freqSum*ampSum)/(ampSum*(powFreqSum - Math.pow(freqSum,2)));\n}\n","import mu from 'extractorUtilities';\n\nexport default function(bufferSize, m){\n  var ampspec = m.ampSpectrum;\n  return Math.sqrt(mu(2,ampspec)-Math.pow(mu(1,ampspec),2));\n}\n","export default function(bufferSize, m){\n  var zcr = 0;\n  for(var i = 0; i < m.signal.length; i++){\n    if((m.signal[i] >= 0 && m.signal[i+1] < 0) || (m.signal[i] < 0 && m.signal[i+1] >= 0)){\n      zcr++;\n    }\n  }\n  return zcr;\n}\n"],"sourceRoot":"/source/"}